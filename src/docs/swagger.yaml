openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
paths:
  /api/v1/user/create:
    post:
      summary: Cria um novo usuário
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: João Silva
                email:
                  type: string
                  example: joao@email.com
                password:
                  type: string
                  example: senha123
      responses:
        201:
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Usuário criado com sucesso
                  user:
                    $ref: '#/components/schemas/User'
        500:
          description: Erro ao criar usuário
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Erro ao criar usuário
  /api/v1/user/all:
    get:
      summary: Retorna todos os usuários (admin)
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: Token da conta para acesso (apenas contas cujo o isAdmin for true)
      responses:
        200:
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Não autorizado
        500:
          description: Erro interno do servidor
  /api/v1/logs:
    get:
      summary: Retorna logs das rotas
      tags:
        - Logs
      responses:
        200:
          description: Logs das rotas
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                    example: "/api/login"
                  counter:
                    type: number
                    example: 10
        500:
          description: Erro interno do servidor
  /:
    get:
      summary: Retorna informações gerais
      tags:
        - Index
      responses:
        200:
          description: Informações gerais
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  ping:
                    type: string
                    example: "1678888888ms"
                  timestamp:
                    type: string
                    example: "2024-03-15T14:01:28.586Z"
        500:
          description: Erro interno do servidor
  /api/v1/login:
    post:
      summary: Realiza o login de um usuário
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: joao@email.com
                password:
                  type: string
                  example: senha123
      responses:
        200:
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Login realizado com sucesso
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmQ4ZjQ4NzU4Y2M5N2QzNDQ4ZDQ1NiIsImlhdCI6MTY5NDQ0NDQ0OCwiZXhwIjoxNjk0NDQ4MDQ4fQ.HRhmD-LJhJQNRaX3Q1dQzJ-KqJ3Qn_K5L3a5Jj2Jj2
        400:
          description: Email e senha são obrigatórios
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Email e senha são obrigatórios
        401:
          description: Usuário não encontrado ou senha incorreta
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Usuário não encontrado
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Erro ao realizar login
  /api/v1/logout:
    post:
      summary: Realiza o logout de um usuário
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmQ4ZjQ4NzU4Y2M5N2QzNDQ4ZDQ1NiIsImlhdCI6MTY5NDQ0NDQ0OCwiZXhwIjoxNjk0NDQ4MDQ4fQ.HRhmD-LJhJQNRaX3Q1dQzJ-KqJ3Qn_K5L3a5Jj2Jj2
      responses:
        200:
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Logout realizado com sucesso
        400:
          description: Token é obrigatório
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Token é obrigatório
        401:
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Usuário não encontrado
        500:
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Erro ao realizar logout
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "64fd8f48758cc97d3448d456"
        name:
          type: string
          example: "João Silva"
        email:
          type: string
          example: "joao@email.com"
        isAdmin:
          type: boolean
          example: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
